Kurssin osoite: https://fullstackopen.github.io/

#####################################################################################################
# LUETTAVAA

## FUNKTIOT: lue Functions-osio: https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript#Functions

## CLOSURES: lue Closures-osio: https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript#Closures

## KIRJAT: https://github.com/getify/You-Dont-Know-JS


#####################################################################################################
# AJANKÄYTTÖ:
Osa2: 2, 1, 8, 8, 8, 8, 8


#####################################################################################################
# TEHTAVAT

## PUHELINLUETTELO
kehitys
	kaynnista frontend: npm start
	kaynnista backend: npm run watch
	frontendin package.json lisatty "proxy": "http://localhost:3001", joka ohjaa kasittelemattomat requestit localhostin porttiin 3001 eli kehityspalvelimelle

tuotanto
	herokun tililla janrom-puhelinluettelo


#####################################################################################################
# MUISTIINPANOT:

WEB-SOVELLUSKEHITYKSEN SÄÄNTÖ NUMERO 1: Pidä selaimen developer-konsoli aina auki.
  Välilehdistä tulee olla auki nimenomaan Console jollei ole erityistä syytä käyttää jotain muuta välilehteä.

Tapahtumankäsittelijöinä olevia Javascript-funktioita kutsutaan callback- eli takaisinkutsufunktioiksi

Document Object Model eli DOM on ohjelmointirajapinta eli API, joka mahdollistaa selaimessa esitettävien web-sivuja vastaavien elementtipuiden muokkaamisen ohjelmallisesti.


#####################################################################################################
# NPM

npx create-react-app nimi // luo uuden 'nimi'-nimisen projektin

npm start // tarjoilee projektin tiedostoja paikallisesti, osoitteessa localhost:3000

## NPM paketit
npm install json-server --save
npm install axios --save

## NPM SKRIPTIT (lisää package.json:n "scripts"-blokin loppuun)
"server": "json-server -p3001 db.json" // tarjoilee db.json-tiedoston osoitteessa localhost:3001/<db.json:n juurinimi>

## TUOTANTO
npm run build // tekee projektista optimoidun tuotantoversion

"proxy": "http://localhost:3001" // jos tuotantopalvelin kaytossa ja haluaa kayttaa myos testipalvelinta, lisaa testipalvelimen osoite frontendin package.json "proxy"-kenttaan

## ESTA SELAIMEN AUTOMAATTINEN KAYNNISTYS KOMENNOLLA 'NPM START'
create file .env in the same directory where your package.json lives
insert this line BROWSER=none to the file and save it
run nom start and web browser will not be opening anymore
lahde: https://github.com/facebook/create-react-app/issues/873#issuecomment-373158830


#####################################################################################################
# GIT

## ADD
git add -A stages all changes
git add . stages new files and modifications, without deletions
git add -u stages modifications and deletions, without new files

## BRANCH
luo uusi branch:
	git checkout -b branchin-nimi
lisaa muutokset remote branchiin
	git add -A
	git commit -m "viesti"
	git push branchin-nimi
poista branch remotesta
	git push origin :branching-nimi // tyhja push siis poistaa remoten branchin


#####################################################################################################
# HEROKU

## UUSI NODE-PROJEKTI
1. luo Procfile tiedosto projektin juureen:
	echo 'web: node index.js' >> Procfile
2. muuta porttimaaritys index.js:
	const PORT = process.env.PORT || 3001
3. heroku create nimi --region eu
4. git remote -v // tarkista remotet
5. git push heroku master

## KOMENTOJA
heroku login	// kirjaudu tilille
heroku info	// nayta herokusovelluksen tiedot
heroku logs -t	// seuraa herokusovellusen logeja


#####################################################################################################
# DEBUGGAUS
React-sovellusten debuggaus:
	https://fullstackopen.github.io/osa1/#react-sovellusten-debuggaus

tulosta objektin tila:
	console.log

keskeyttaa koodin suorittamisen debugger-kutsun kohdalle ja avaa dev toolsin Sources-tabin debugger-kutsun kohdalta.
Console-tabissa paasy ohjelman sen hetkiseen tilaan, esim. console.loggailla ko. tilassa olevia objekteja
	debugger

## VIRHEILMOITUKSIA JA NIIDEN KORJAUKSIA
Virheilmoitus: 
	Access to XMLHttpRequest at 'http://localhost:3001/notes' from origin 'http://localhost:3000' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.
Merkitys: 
	Estetty resurssien pyytaminen muista domaineista, kuin siita domainista, josta ensimmainen resurssi on tarjoiltu.
Korjaus: 
	Lisaa CORS-middleware npm-projektiin: npm install cors

Virheilmoitus: 
	ENOSPC: System limit for number of file watchers reached
Merkitys: 
	/proc/sys/fs/inotify/max_user_watches oleva tiedoston tarkkailijoiden (file watchers) maara ylitetty
Korjaus: 
	muokkaa tiedostoa /etc/sysctl.conf lisaamalla loppuun rivi fs.inotify.max_user_watches=524288. luku on maksimi tarkkailijoiden maara Linuxilla. Kaynnista terminaali ja VSCode uudelleen.


#####################################################################################################
# JAVASCRIPT

## THIS
Javascriptissa this:n arvo määrittyy sen mukaan miten metodia on kutsuttu

jos funktiota kutsutaan pistenotaatiolla (dot notation) tai sulkunotaatiolla (bracket notation), kutsuvasta objektista tulee this.
  jos em. notaatiota ei käytetä, this viittaa globaaliin objectiin (window selaimissa)
 
this:n voi välittää funktiolle bind, apply ja call -funkioilla
  jos arvoksi tulee null tai undefined, käytä em. funktioita


## LUOKKA VS FUNKTIO
komponentin voi määritellä luokaksi (OOP-tyyli) tai funktioksi (funktionaalinen ohjelmointi)

jos komponentilla on useita eri tiloja => tee siitä luokka
tällaiset komponentit kannattaa sijoittaa mahdollisimman ylös komponenttihierarkiassa, eli mahd. lähelle HTML:n body-elementtiä tai hierarkian root-elementtiä (esim. eka div)


## MUUTTUJAT
let: block-tason muuttujan (alkaen ECMAScript 2015)

const: muuttumaton arvo (alkaen ECMAScript 2015)

var: function-tason muuttujia (näkyvyys funktion sisällä tai globaali jos tekee funktion ulkopuolella)


## OBJEKTI
object prototype:
  function Person(name, age) {
    this.name = name;
    this.age = age;
  }
  var you = new Person('You', 24); 


## FUNKTIO
const Joku = () => {
  //koodi
  return (
    //koodi
  )
}

this määritellään funktion kutsun yhteydessä

funktioita voi määritellä sisäkkäin. kannattaa käyttää silloin kun funktio liittyvät vain ja ainoastaan toisiinsa eikä käytetä muualla

funktion kutsussa olevat parametrit löytyvät AINA arguments-taulukosta, funktion sisällä. ts arguments-taulukko on funktioihin sisäänrakennettu

funktioilla on aina arguments-niminen taulukko, jossa on kaikki funktiokutsussa annetut parametrit:
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments
  
...args-parametri ottaa vastaan kaikki funktiokutsussa annetut parametrit, esim:
function add(...args) {
  var sum = 0;
  for (let a of args) {
    sum += a;
  }
  return sum;
}
add(1,2,3,4,5,6);

...args voi ottaa vastaan myös loput yli jääneistä funktiokutsun parametreista:
function add(first, second, ...args) {
  var sum = 0;
  sum += first;
  sum += second;
  // lisää loput
  for (let a of args) {
    sum += a;
  }
  return sum;
}
add(1,2,3,4,5,6);


## NUOLIFUNKTIO
yksi lauseke:
const Joku = () => x // sama kuin: const Joku = () => return x

useampi lauseke:
const Joku = () => {
  return x
}

this määritellään nuolifunktion määrittelyn yhteydessä


## CURRYING
termi, jota käytetään kun funktio palauttaa funktion


## PROTOTYYPPI
prototyyppiin lisätyt ominaisuudet (properties) jaetaan kaikkiin prototyypistä tehtyjen objektien kesken, esim:
  function Person(first, last) {
  this.first = first;
  this.last = last;
  }
  Person.prototype.fullName = function() {
    return this.first + ' ' + this.last;
  };
  Person.prototype.fullNameReversed = function() {
    return this.last + ', ' + this.first;
  };
  
  fullName ja fullNameReversed -funktioita ei ole määritelty suoraan Person-objectiin vaan prototyyppiin, jossa ne jaetaan kaikkien Person-funktio-objektien (function   
  object) kesken.
  Jos lisättäisiin suoraan Person-objektiin niin aina kun luodaan uusi Person-funktio-objekti luotaisiin lisäksi kaksi uuttaa funktio-objektia fullName ja             
  fullNameReversed


## TERNARY / CONDITIONAL EXPRESSION: 
  var allowed = (age > 18) ? 'yes' : 'no';

## ARRAY:
  var a = ['dog', 'cat', 'hen'];

## FOR:
  for (var i = 0; i < a.length; i++) {
    // Do something with a[i]
  }

## FOREACH
  ['dog', 'cat', 'hen'].forEach(function(currentValue, index, array) {
    // Do something with currentValue or array[index]
  });
  
## FOR OF
ES2015 introduced the more concise for...of loop for iterable objects such as arrays:

for (const currentValue of a) {
  // Do something with currentValue
}


#####################################################################################################
# REACT

## KOMPONENTTI 
dokumentaatio: https://reactjs.org/docs/react-component.html

componentDidMount() kutsutaan heti, kun komponentti on ladattu. täällä voi tehdä esim. DOM:n alustuksia tai kutsua setState:a


### PROPS-PARAMETRI
parameterejä voi välittää komponenttien välillä propsien avulla https://reactjs.org/docs/components-and-props.html

esimerkki arvo parametrina:
  komponentti Hello ja props-parametri:
    const Hello = (props) => {
      return (
        <div>
          <p>Hello {props.name}</p>
        </div>
      )
    }  
  komponentin käyttäminen ja parametrin antaminen:
    const App = () => {
      return (
        <div>
          <h1>Greetings</h1>
          <Hello name="Arto" />
          <Hello name="Pekka" />
        </div>
      )
    }

esimerkki parametrillinen funktio parametrina:
  komponentti:
    var x = true
    const Joku = (props) =>
      <button onClick={() => props.funktioX(x)}>Poista</button> // huomaa '() =>', ilman tuota 'props.funktioX(x)' suoritetaan heti. nyt '() =>' suoritetaan heti ja se palauttaa funktion 'props.funktioX(x)'

  komponentin kaytto:
    <Joku funktioX={this.funktioX}/> // jos tulee null tai undefined, liita 'this' bind-funktiolla: <Joku funktioX={this.funktioX.bind(this)} />
  

### SETSTATE 
käytetään Reactin komponentin tilan muuttamiseen

syntaksi (nuolifunktiona)
  nollaa = () => this.setState({ value: 0 }) 

  class App extends React.Component {
    constructor() {
        super()
        this.state = {
            value: 10
        }
     ...
    
komponentin this.state -tilaa ei saa muuttaa suoraan vaan aina setState-funktion kautta

setState-funktiota kutsutaan asynkroonisesti


#####################################################################################################
# BABEL
Babelin avulla voi käyttää selainten tukemaa ES-standardia uudempia ominaisuuksia. jos ominaisuus ei ole standardissa, tarkistaa tukeeko babel jo sitä


#####################################################################################################
# NOSQL-TIETOKANNAT (NoSQL, Not Only SQL, NewSQL)
- Voidaan jakaa neljään eri luokkaan:
1. avain-arvotietokantoihin (engl. key value databases)
	- esim. Redis
	- hyvä cachetukseen
2. dokumenttitietokantoihin (engl. document databases)
	- esim. MongoDB
	- Dokumentti: 
		- muodostuu avain-arvo-pareista, jossa arvona voi olla primitiiviarvon lisäksi olio tai taulukko
		- vastaa relaatiotietokantaan tallennettua tietuetta eli taulun riviä
	- Kokoelma:
		- suunnilleen sama merkitys, kuin taululla relaatiotietokannoissa. 
		- Kokoelma muodostuu dokumenteista. 
			- Jokainen dokumentti voi olla rekenteeltaan erilainen. 
		- Kokoelma ei käytä skeemaa vaan skeemaa vastaavat määrittelyt ja tehtävät ovat sovelluksen vastuulla
3. saraketietokantoihin (engl. columnar databases)
	- esim. Cassandra
	- hyvä analysointiin
	- tallennetaan sarakkeittain omiin tiedoihinsa
		- sarakkeen tiedon haku nopeaa, koska sarakkeet eroteltu
			- esim. jos halutaan vain kaikkien etunimet, on haku nopeaa koska tieto on omassa sarakkeessa eli eroteltu omaan tiedostoon
4. verkkotietokantoihin (engl. graph databases)
	- esim. Neo4J
	- hyvä mallintamaan entiteettien (esim. henkilöiden) verkostoa ja entiteettien välisisiä suhteita
	- tietorakenteena on verkko (graph), joka muodostuu entiteettejä kuvaavista solmuista (node) ja niiden välisiä suhteita kuvaavista kaarista (edge)
		- solmuilla ja kaarilla voi olla attribuutteja

- suosituimmat tietokannat tyypeittäin sekä tietoa niistä: https://db-engines.com/en/ranking

- Sovelluksessa voi olla käytössä monta erilaista tietokantaa. 
	- Tietokannalle valitaan sopivin noSQL-tekniikka, eikä kaikki tietokannat käytä samaa tekniikkaa, esim. cachetettava data tallennetaan Redisiin ja dokumentit MongoDB:hen

- CAP-teoreema
	- Consistency: tarkoittaa lineaarisuutta. prossessin A pitää olla päättynyt ennen kuin prosessi B voi alkaa. Prosessi B ei saa tietää prosessin A olemassaolosta
	- Availability: pyyntöihin vastaamisessa ei saa olla pitkiä viiveitä. Järjestelmän on vastattava, jos sillä on siihen tilaisuus
	- Partition tolerance: järjestelmän tulee toimia vaikka esim. palvelinkoneiden välinen yhteys katkeaa
	- Skaalautuvuuteen liittyvä termi, jota käytetään, kun tietokanta hajautetaan eri palvelinkoneiden välille
	- Käytännössä, jos järjestelmä on skaalattu vähintään kahdelle palvelimelle, vain 2/3 CAP-teoreeman määritelmistä voi täyttyä
		- Todellisuudessa yksi määritelmistä voi olla prioriteettina ja kaksi muuta seuraa perässä, esim. pankkijärjestelmissä Consistenty on tärkein


